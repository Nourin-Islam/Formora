generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  passwordHash       String
  name               String
  clerkId            String?           @unique
  languagePreference String            @default("en")
  themePreference    String            @default("light")
  isAdmin            Boolean           @default(false)
  isBlocked          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt()
  status             String            @default("ACTIVE")
  
  templates          Template[]
  forms              Form[]
  comments           Comment[]
  likes              Like[]
  accesses           TemplateAccess[]
  @@index([email])
@@index([name])
@@index([createdAt]) 
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  
  templates Template[]
}

model Template {
  id           Int               @id @default(autoincrement())
  userId       Int
  topicId      Int
  title        String
  description  String
  imageUrl     String?
  isPublic     Boolean
  isPublished  Boolean           @default(false)
  likesCount   Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt()
    searchVector  Unsupported("tsvector")? // Required for Postgres FTS

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions    Question[]
  forms        Form[]
  comments     Comment[]
  likes        Like[]
  tags         TemplateTag[]
  accesses     TemplateAccess[]

  @@index([title])
  @@index([description])
  @@index([userId])
  @@index([topicId])
  @@index([isPublic])
  @@index([isPublished])
}

enum QuestionType {
  STRING
  TEXT
  INTEGER
  CHECKBOX
}

model Question {
  id           Int          @id @default(autoincrement())
  templateId   Int?
  title        String
  description  String
  questionType QuestionType
  position     Int
  showInTable  Boolean
  options      Json?
  correctAnswers Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt()

  template     Template?     @relation(fields: [templateId], references: [id], onDelete: SetNull)
  answers      Answer[]
}

model Form {
  id          Int      @id @default(autoincrement())
  templateId  Int?
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  template    Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@unique([templateId, userId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  formId     Int
  questionId Int?
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
}

model Comment {
  id         Int      @id @default(autoincrement())
  templateId Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  templateId Int
  userId     Int
  createdAt  DateTime @default(now())

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
}

model Tag {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  usageCount Int            @default(0)
  createdAt  DateTime       @default(now())
  
  templates  TemplateTag[]
}

model TemplateTag {
  templateId Int
  tagId      Int
  
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([templateId, tagId])
}

model TemplateAccess {
  templateId Int
  userId     Int
  createdAt  DateTime @default(now())

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([templateId, userId])
}

model TemplateSearchView {
  id             Int      @id
  title          String
  description    String?
  imageUrl       String?
  isPublic       Boolean
  isPublished    Boolean
  likesCount     Int
  createdAt      DateTime
  updatedAt      DateTime
  userId         Int
  topicId        Int
  user           Json     // Added to match your view's jsonb_build_object
  topic          Json     // Added to match your view's jsonb_build_object
  tags           Json?    // Added for the tags array
  peopleLiked    Json?    // Added for the clerkIds array
  commentsCount  Int
  questionsCount Int
  @@map("template_search_view")
}

model FormSubmissionView {
  form_id                 Int       @map("form_id")
  templateId              Int
  template_title          String
  template_creator_name   String
  template_question_count Int
  template_submission_count Int
  user_id                 Int       @map("user_id")
  user_name               String    @map("user_name")
  submission_date         DateTime  @map("submission_date")
  question_id             Int       @map("question_id")
  question_title          String    @map("question_title")
  question_type           String    @map("question_type")
  show_in_table           Boolean   @map("show_in_table")
  answer                  String

  @@id([form_id, question_id])
  @@map("form_submissions_view")
}


// model FormSubmissionView {
//   form_id        Int       @map("form_id")
//   templateId     Int
//   user_id        Int       @map("user_id")
//   user_name      String    @map("user_name")
//   submission_date DateTime @map("submission_date")
//   question_id    Int       @map("question_id")
//   question_title String    @map("question_title")
//   question_type  String    @map("question_type") // Or use an enum if you have fixed types
//   show_in_table  Boolean   @map("show_in_table")
//   answer         String

//   @@id([form_id, question_id])
//   @@map("form_submissions_view")
// }

// View Related Info

// await prisma.$executeRaw`REFRESH MATERIALIZED VIEW template_search_joined_view`;
// await prisma.$executeRaw`REFRESH MATERIALIZED VIEW template_search_view`;


// create view
//  CREATE OR REPLACE VIEW template_search_view AS
// SELECT 
//   t.id,
//   t.title,
//   t.description,
//   t."imageUrl",
//   t."isPublic",
//   t."isPublished",
//   t."likesCount",
//   t."createdAt",
//   t."updatedAt",
//   t."userId",
//   t."topicId",
//   jsonb_build_object(
//     'id', u.id,
//     'name', u.name,
//     'email', u.email,
//     'clerkId', u."clerkId"
//   ) AS user,
//   jsonb_build_object(
//     'id', tp.id,
//     'name', tp.name
//   ) AS topic,
//   (
//     SELECT jsonb_agg(jsonb_build_object(
//       'id', tag.id,
//       'name', tag.name,
//       'usageCount', tag."usageCount"
//     ))
//     FROM "TemplateTag" tt
//     JOIN "Tag" tag ON tag.id = tt."tagId"
//     WHERE tt."templateId" = t.id
//   ) AS tags,
//   (
//     SELECT jsonb_agg(u_liked."clerkId")
//     FROM "Like" l
//     JOIN "User" u_liked ON u_liked.id = l."userId"
//     WHERE l."templateId" = t.id
//   ) AS "peopleLiked",
//   (
//     SELECT COUNT(*) 
//     FROM "Comment" c 
//     WHERE c."templateId" = t.id
//   ) AS "commentsCount",
//   (
//     SELECT COUNT(*) 
//     FROM "Question" q 
//     WHERE q."templateId" = t.id
//   ) AS "questionsCount"
// FROM "Template" t
// JOIN "User" u ON u.id = t."userId"
// JOIN "Topic" tp ON tp.id = t."topicId";


// FROM "Template" t;


// add giin

// CREATE INDEX idx_template_search_vector 
// ON template_search_view 
// USING GIN (search_vector);



// create joined view

//  CREATE MATERIALIZED VIEW template_search_joined_view AS
// SELECT 
//   t.id,
//   t.title,
//   t.description,
//   t."imageUrl",
//   t."isPublic",
//   t."isPublished",
//   t."likesCount",
//   t."createdAt",
//   t."updatedAt",
//   json_build_object(
//     'id', u.id,
//     'clerkId', u."clerkId",
//     'name', u.name,
//     'email', u.email
//   ) AS "user",
//   json_build_object(
//     'id', top.id,
//     'name', top.name,
//     'createdAt', top."createdAt"
//   ) AS "topic",
//   (
//     SELECT json_agg(json_build_object(
//       'id', tag.id,
//       'name', tag.name,
//       'usageCount', tag."usageCount",
//       'createdAt', tag."createdAt"
//     ))
//     FROM "TemplateTag" tt
//     JOIN "Tag" tag ON tag.id = tt."tagId"
//     WHERE tt."templateId" = t.id
//   ) AS "tags",
//   (
//     SELECT json_agg(u."clerkId")
//     FROM "Like" l
//     JOIN "User" u ON u.id = l."userId"
//     WHERE l."templateId" = t.id
//   ) AS "peopleLiked",
//   (
//     SELECT COUNT(*) FROM "Question" q WHERE q."templateId" = t.id
//   ) AS "questionCount",
//   (
//     SELECT COUNT(*) FROM "Comment" c WHERE c."templateId" = t.id
//   ) AS "commentCount"
// FROM "Template" t
// JOIN "User" u ON u.id = t."userId"
// JOIN "Topic" top ON top.id = t."topicId";


// add giin

// CREATE INDEX idx_template_join_search_vector ON template_search_joined_view USING GIN (search_vector);
// CREATE UNIQUE INDEX idx_template_search_joined_view_id ON template_search_joined_view (id);

// remove giin 

// DROP INDEX IF EXISTS idx_template_join_search_vector;
// DROP INDEX IF EXISTS idx_template_search_joined_view_id;


// DROP MATERIALIZED VIEW IF EXISTS template_search_joined_view;